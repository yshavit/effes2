║ Tokens
╠═══════════════════════════════════════════════════════════════════════════════
║ 
║ quoted text is keyword or op, anything else is a description.
║ 
║ TYPE       : Any word that starts with uppercase and has at least one
║              lowercase. Preceding underscores are allowed. e.g. Foo, _Foo.
║ IDENTIFIER : Any word that stars with a lowrecase. Preceding underscores are
║              allowed. e.g. foo, fooBar, _fooBaz.
║ INDENT     : An indentation event in the stream
║ DEDENT     : An dedentation event in the stream
║ NL         : A newline
╚═══════════════════════════════════════════════════════════════════════════════

║
║ Rules
╠═╤═════════════════════════════════════════════════════════════════════════════
║ │
║ ┝━ file ────────────────────────────────────────────────────────────────────── 
║ │ - import*
║ │ - declaration*
║ │
║ ┝━ declaration ─────────────────────────────────────────────────────────────── 
║ │ - type or method
║ │
║ ┝━ import ──────────────────────────────────────────────────────────────────── 
║ │ 'import' <modulename> ':' declaration (, declaration)*
║ │
║ ┝━ args ────────────────────────────────────────────────────────────────────── 
║ │ '(' identifier (',' identifier)* ')'
║ │
║ ┝━ type ────────────────────────────────────────────────────────────────────── 
║ │ - 'type' TYPE
║ │ - opt. (args...)
║ │ - opt. ':' INDENT methods DEDENT
║ │
║ ┝━ method ──────────────────────────────────────────────────────────────────── 
║ │ - IDENTIFIER args
║ │ - opt. '->'
║ │   ↳  Iff provided, method has a return value
║ │ - ':' block
║ │
║ ┝━ block ─────────────────────────────────────────────────────────────────────
║ │ INDENT (statement NL)+ DEDENT
║ │ INDENT ('::' NL) DEDENT
║ │ 
║ ┝━┯━ statement ─────────────────────────────────────────────────────────────── 
║ │ ╎ while       : 'while' expression ':' block
║ │ ╎ while-is    : 'while' expression 'is' ':' matcherlist<block>
║ │ ╎             ↳  Each matcherblock's block must end in a
║ │ ╎                continue, break or return statement.
║ │ ╎ if          : 'if' expression ':' block else?
║ │ ╎ if-is       : 'if' expression 'is' ':' matcherlist<block>
║ │ ╎             ↳  Once type checking is in place, all types must be matched
║ │ ╎ assume      : 'assume' expression
║ │ ╎ return      : 'return' expression?
║ │ ╎ break       : 'break'
║ │ ╎ assignment  : IDENTIFIER = expression
║ │ ├┈
║ │ ╎ invocation  : (like the expression)
║ │ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
║ │ 
║ ┝━┯━ else ────────────────────────────────────────────────────────────────────
║ │ ╎ 'elif' expression ":' block else?
║ │ ╎        ↳ Like the 'if' statement
║ │ ╎ 'else' ':' block
║ │ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
║ │ 
║ ┝━┯━ expression ────────────────────────────────────────────────────────────── 
║ │ ╎ if-is          : like if-is statement, but with matchrelist<expression>
║ │ ╎ instantiation  : TYPE (args...)?
║ │ ╎ string_literal : "..."
║ │ ╎ int_literal    : [+-]? digits
║ │ ╎ variable       : (expression '.')? IDENTIFIER
║ │ ╎ isa            : expression 'is' matcher
║ │ ╎ isnot          : expression 'is' 'not' matcher
║ │ ╎ this           : 'this'
║ │ ╎ invocation     : (expression '.')? IDENTIFIER (args...)
║ │ ├┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
║ │ ╎ Note: These and future expressions can never contain ':' as a token.
║ │ ╎       That would confuse the parsing of matchers' guard expressions.
║ │ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
║ │ 
║ ┝━┯━ matcherlist<k> ────────────────────────────────────────────────────────────
║ │ ╎ matcherblock<k>, where a matcherblock<k> is:
║ │ ╎ matcher ':' <k>
║ │ ╎              ↳ <k> is either a statement, a block or an expression
║ │ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
║ │ 
║ ┝━┯━ matcher ───────────────────────────────────────────────────────────────── 
║ │ ╎ '*' (':' expression)?
║ │ ╎ '@'? bindto (':' expression)?
║ │ ╎  ↳ The '@' is required if bindto should be exported to the containing
║ │ ╎    scope of the construct that contains this matcher. For instance, if
║ │ ╎    this matcher is in an if clause, the containing scope for that if. 
║ │ ╎    This is required if the bindto overwrites a variable in that scope;
║ │ ╎    if it does, that binding holds true for the variable's entire scope,
║ │ ╎    not just the aforementioned containing scope. The binding only
║ │ ╎    takes place is the expression evaluates to True.
║ │ ╎ TYPE (matchers...)
║ │ ╎ (bindto ':')? regex 
║ │ ╎ QUOTED
║ │ ├┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈
║ │ ╎ regex: '~/' (regex as parsed by Java) '/'
║ │ ╰╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌
║ │ 
║ ╰─────────────────────────────────────────────────────────────────────────────
║
