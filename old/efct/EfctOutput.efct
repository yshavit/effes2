efct 0

FUNC : toFile 2 0 0
# $0: moduleName, then fh
# $1: parsed
# $2: types
# $3: typeName
# $4: typeArgs
# $5: oneArg
pvar 0                            # [module_name]
str  ".efct"                      # [module_name, ".efct"]
call_String:concat                # [file_name]
call_Stream:writeFile             # [fh]
svar 0                            # []
pvar 0                            # [fh]
str  "efct 0\n\n"                 # ["efct 0"]
call_Stream:writeText             # []
pvar 1                            # [parsed]
pfld Parser:EfFile types          # [parsed.types]
svar 2                            # []
labl @loop_top                    # []
pvar 2                            # [types]
typf ConsList:Cons                # [types?, isCons]
gofi @loop_end                    # [types]
Pfld ConsList:Cons head           # [types, types.head]
typf Parser:EfType                # [types, types.head?, isEfType]
gofi @loop_end_1                  # [types, types.head]
Pfld Parser:EfType name           # [types, types.head, types.head.name]
svar 3                            # [types, types.head]
pfld Parser:EfType args           # [types, thead.head.args]
svar 4                            # [types]
pfld ConsList:Cons tail           # [types.tail]
svar 2                            # []
pvar 0                            # [stream]
str  "TYPE 0 "                    # [stream, str]
call_Stream:writeText             # []
pvar 0                            # [stream]
pvar 3                            # [stream, typeName]
call_Stream:writeText             # []
labl @inner_loop_top              # []
pvar 4                            # [args]
typf ConsList:Cons                # [args?, isCons]
gofi @inner_loop_end              # [args]
Pfld ConsList:Cons head           # [args, head]
svar 5                            # [args]
pfld ConsList:Cons tail           # [args.tail]
svar 4                            # []
pvar 0                            # [stream]
str  " "                          # [stream, str]
call_Stream:writeText             # []
pvar 0                            # [stream]
pvar 5                            # [stream, oneArg]
call_Stream:writeText             # []
goto @inner_loop_top              # []
labl @inner_loop_end              # []
pvar 0                            # [stream]
str  "\n"                         # [newline]
call_Stream:writeText             # []
goto @loop_top                    # []
labl @loop_end_1                  # [x]
pop                               # []
labl @loop_end                    # []
rtrn
