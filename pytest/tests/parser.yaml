desc: empty
entry_module: Parser
stdin: ''
stdout: |
  Parser:EfFile
    types: ConsList:Empty
---
desc: simple type
entry_module: Parser
stdin: |
  type Foo
stdout: |
  Parser:EfFile
    types: ConsList:Cons
      [0]: Parser:EfType
        name: Foo
        args: ConsList:Empty
---
desc: two types
entry_module: Parser
stdin: |
  type Foo
  type Bar
stdout: |
  Parser:EfFile
    types: ConsList:Cons
      [0]: Parser:EfType
        name: Foo
        args: ConsList:Empty
      [1]: Parser:EfType
        name: Bar
        args: ConsList:Empty
---
desc: zero args, but with parens
entry_module: Parser
stdin: |
  type Foo()
stdout: |
  Parser:EfFile
    types: ConsList:Cons
      [0]: Parser:EfType
        name: Foo
        args: ConsList:Empty
---
desc: one arg
entry_module: Parser
stdin: |
  type Foo(arg1)
stdout: |
  Parser:EfFile
    types: ConsList:Cons
      [0]: Parser:EfType
        name: Foo
        args: ConsList:Cons
          [0]: arg1
---
desc: two args
entry_module: Parser
stdin: |
  type Foo(arg1, arg2)
stdout: |
  Parser:EfFile
    types: ConsList:Cons
      [0]: Parser:EfType
        name: Foo
        args: ConsList:Cons
          [0]: arg1
          [1]: arg2
---
desc: three args
entry_module: Parser
stdin: |
  type Foo(arg1, arg2, arg3)
stdout: |
  Parser:EfFile
    types: ConsList:Cons
      [0]: Parser:EfType
        name: Foo
        args: ConsList:Cons
          [0]: arg1
          [1]: arg2
          [2]: arg3
---
desc: two types with args
entry_module: Parser
stdin: |
  type Foo(arg1, arg2)
  type Bar(arg3)
stdout: |
  Parser:EfFile
    types: ConsList:Cons
      [0]: Parser:EfType
        name: Foo
        args: ConsList:Cons
          [0]: arg1
          [1]: arg2
      [1]: Parser:EfType
        name: Bar
        args: ConsList:Cons
          [0]: arg3
