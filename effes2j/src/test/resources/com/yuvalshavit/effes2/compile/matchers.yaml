name: wild, keep unmatched
options: { keepIfNotMatched: true }
input: '*'
expect: |
  Svar 0
  pop
  goto @MATCHED
---
name: wild, pop unmatched
options: { keepIfNotMatched: false }
input: '*'
expect: |
  pop
  goto @MATCHED
---
name: just name, keep unmatched
options: { keepIfNotMatched: true }
input: 'abc'
expect: |
  Svar 0
  Svar 1
  pop
  goto @MATCHED
---
name: just name, pop unmatched
options: { keepIfNotMatched: false }
input: 'abc'
expect: |
  Svar 0
  pop
  goto @MATCHED
---
name: guarded name, keep unmatched
options: { keepIfNotMatched: true }
input: abc if abc == 1
expect: |
  Svar 0                    # [val]   $0=val
  Svar 1                    # [val]   $1{abc}=val
  pop                       # []
  int 1                     # [1]
  pvar 1                    # [val, 1]
  call_Integer:eq           # [val==1?]
  gofi match_fail_pop_0     # []
  goto @MATCHED             # []
  labl match_fail_pop_0     # []
  pvar 0                    # [val]
  goto @UNMATCHED           # [val]
---
name: guarded name, pop unmatched
options: { keepIfNotMatched: false }
input: abc if abc == 1
expect: |
  Svar 0                    # [val]   $0{abc}=val
  pop                       # []
  int 1                     # [1]
  pvar 0                    # [1, val]
  call_Integer:eq           # [val==1?]
  gofi match_fail_pop_0     # []
  goto @MATCHED             # []
  labl match_fail_pop_0     # []
  goto @UNMATCHED           # []
---
name: guarded name to parent scope
options: { keepIfNotMatched: true }
localVars:
  oneVar: {reg: 0}
  abc: {reg: 1}
  twoVar: {reg: 2}
input: '@abc if abc == 1'
expect: |
  Svar 3                  # [val]   $3=val
  Svar 4                  # [val]   $4{abc'}=val
  pop                     # []
  int 1                   # [1]
  pvar 4                  # [1, val']
  call_Integer:eq         # [val'==1?]
  gofi match_fail_pop_0   # []
  pvar 4                  # [val']
  svar 1                  # []      $abc=val'
  goto @MATCHED           # []
  labl match_fail_pop_0   # []
  pvar 3                  # [val]
  goto @UNMATCHED         # [val]
---
name: singleton type pattern
options: { keepIfNotMatched: false }
types:
  Nothing:
    fields: []
input: Nothing
expect: |
  typp :Nothing           # [val, valIsNothing]
  gofi match_fail_pop_1   # [val]
  pop                     # []
  goto @MATCHED           # []
  labl match_fail_pop_1   # [val]
  pop                     # []
  goto @UNMATCHED         # []
---
name: regex type pattern, keep unmatched
options: { keepIfNotMatched: true }
input: '~/foo (\w+)/'
expect: |
  #                       # [val]
  Svar 0                  # [val]   $0=val
  typp String             # [val, valIsStr}
  gofi match_fail_pop_1   # [val]
  str "foo (\\w+)"        # [val, pattern]
  call_String:regex       # [match?]
  typp Match              # [match?, matchIsMatch]
  gofi match_fail_pop_1   # [match?]
  pop                     # []
  goto @MATCHED           # []
  labl match_fail_pop_1   # [val] or [match?]
  pop                     # []
  pvar 0                  # [val]
  goto @UNMATCHED         # [val]
name: regex with forward slash, keep unmatched
options: { keepIfNotMatched: true }
input: '~/foo\/bar/'
expect: |
  #                       # [val]
  Svar 0                  # [val]   $0=val
  typp String             # [val, valIsStr}
  gofi match_fail_pop_1   # [val]
  str "foo/bar"           # [val, pattern]
  call_String:regex       # [match?]
  typp Match              # [match?, matchIsMatch]
  gofi match_fail_pop_1   # [match?]
  pop                     # []
  goto @MATCHED           # []
  labl match_fail_pop_1   # [val] or [match?]
  pop                     # []
  pvar 0                  # [val]
  goto @UNMATCHED         # [val]
---
name: regex type pattern, pop unmatched
options: { keepIfNotMatched: false }
input: '~/foo (\w+)/'
expect: |
  #                       # [val]
  typp String             # [val, valIsStr]
  gofi match_fail_pop_1   # [val]
  str "foo (\\w+)"        # [val, pattern]
  call_String:regex       # [match?]
  typp Match              # [match?, isMatch]
  gofi match_fail_pop_1   # [match?]
  pop                     # []
  goto @MATCHED           # []
  labl match_fail_pop_1   # [val | match?]
  pop                     # []
  goto @UNMATCHED         # []
---
name: complex
options: { keepIfNotMatched: true }
input: Triple(*, abc if abc > 1, Pair(~/plain string$/, patty ~/\d+/))
types:
  Triple:
    fields: [t0, t1, t2]
  Pair:
    fields: [p0, p1]
expect: |
  #                         # [val]
  Svar 0                    # [val]   $0=val
  typp :Triple              # [val, valIsTriple]
  gofi match_fail_pop_1     # [val]
  Pfld :Triple t0           # [val, val.t0]
  pop                       # [val]
  Pfld :Triple t1           # [val, val.t1]
  Svar 1                    # [val, val.t1]   $1=val.t1
  pop                       # [val]
  int 1                     # [val, 1]
  pvar 1                    # [val, 1, val.t1]
  call_Integer:gt           # [val, val.t1==1]
  gofi match_fail_pop_1     # [val]
  Pfld :Triple t2           # [val, val.t2]
  typp :Pair                # [val, val.t2, t2IsPair]
  gofi match_fail_pop_2     # [val, val.t2]
  Pfld :Pair p0             # [val, val.t2, val.t2.p0]
  typp String               # [val, val.t2, val.t2.p0, p0IsString]
  gofi match_fail_pop_3     # [val, val.t2, val.t2.p0]
  str "plain string$"       # [val, val.t2, val.t2.p0, patern]
  call_String:regex         # [val, val.t2, match?]
  typp Match                # [val, val.t2, match?, isMatch]
  gofi match_fail_pop_3     # [val, val.t2, match?]
  pop                       # [val, val.t2]
  Pfld :Pair p1             # [val, val.t2, val.t2.p1]
  typp String               # [val, val.t2, val.t2.p1, p1IsStr]
  gofi match_fail_pop_3     # [val, val.t2, val.t2.p1]
  str "\\d+"                # [val, val.t2, val.t2.p1, pattern]
  call_String:regex         # [val, val.t2, p1Match?]
  typp Match                # [val, val.t2, p1Match?, isMatch]
  gofi match_fail_pop_3     # [val, val.t2, p1Match?]
  Svar 2                    # [val, val.t2, p1Match]    $2=p1Match?
  pop                       # [val, val.t2]
  pop                       # [val]
  pop                       # []
  goto @MATCHED             # []
  labl match_fail_pop_3     # [val, val.t2, val.t2.p0 | match? | val.t2.p1 | p1Match?]
  pop                       # [val, val.t2]
  labl match_fail_pop_2     # [val, val.t2]
  pop                       # [val]
  labl match_fail_pop_1     # [val | val.t1==1]
  pop                       # []
  pvar 0                    # [val]
  goto @UNMATCHED           # [val]
