name: just name
input: someVar
expected:
  MatcherJustName:
  - someVar (IDENT_NAME)
---
name: name with such-that
input: someVar :? someCond
expected:
  MatcherJustName:
  - someVar (IDENT_NAME)
  - ExprVariableOrMethodInvocation:
    - QualifiedIdentName:
      - someCond (IDENT_NAME)
---
name: just regex
input: ~/my[^r]egex/
expected:
  MatcherWithPattern:
  - PatternRegex:
    - my[^r]egex (REGEX)
    - / (REGEX_END)
---
name: named regex
input: someVar ~/my[^r]egex/
expected:
  MatcherWithPattern:
  - someVar (IDENT_NAME)
  - PatternRegex:
    - my[^r]egex (REGEX)
    - / (REGEX_END)
---
name: named type, no args
input: someVar SomeType
expected:
  MatcherWithPattern:
  - someVar (IDENT_NAME)
  - PatternType:
    - SomeType (IDENT_TYPE)
---
name: just type, no args
input: SomeType
expected:
  MatcherWithPattern:
  - PatternType:
    - SomeType (IDENT_TYPE)
---
name: no-arg type with such-that
input: SomeType :? someCond
expected:
  MatcherWithPattern:
  - PatternType:
    - SomeType (IDENT_TYPE)
  - ExprVariableOrMethodInvocation:
    - QualifiedIdentName:
      - someCond (IDENT_NAME)
---
name: unnamed type with just-name arg
input: SomeType(arg1)
expected:
  MatcherWithPattern:
  - PatternType:
    - SomeType (IDENT_TYPE)
    - MatcherJustName:
      - arg1 (IDENT_NAME)
---
name: unnamed type with unnamed regex arg
input: SomeType(~/someRegex/)
expected:
  MatcherWithPattern:
  - PatternType:
    - SomeType (IDENT_TYPE)
    - MatcherWithPattern:
      - PatternRegex:
        - someRegex (REGEX)
        - / (REGEX_END)
---
name: wildcard
input: '*'
expected:
  MatcherWithPattern:
  - PatternAny
