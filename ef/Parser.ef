type ParseSuccess(tree, tail)
type ParseFailure
type Not(tree)

parseExpression(tokens) ->:
  if tokens is:
    Queue(head, tail):
      if head is:
        e IntLiteral(*):
          return ParseSuccess(e, tail)
        e StringLiteral(*):
          return ParseSuccess(e, tail)
        KwThis:
          return ParseSuccess(KwThis, tail)
        KwNot:
          if parseExpression(tail) is:
            ParseSuccess(negated, @tail):
              return ParseSuccess(Not(negated), tail)
            *:
              return Not(ParseFailure)
        *:
          return ParseFailure
    *:
      return ParseFailure

main(args) ->:
  tokens = Tokens.readTokens(Stdio.stdin)
  ::: args is Array
  result = Empty
  if args.get(0) is:
    ~/expression$/:
      result = parseExpression(tokens)
  CharStreamOut.debugPretty(result)
  return 0
