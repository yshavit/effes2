type ParseSuccess(tree, tail)
type ParseFailure
type Not(tree)

parseExpression(tokens) ->:
  if tokens is:
    Queue(e IntLiteral(*), tail):
      return ParseSuccess(e, tail)
    Queue(e StringLiteral(*), tail):
      return ParseSuccess(e, tail)
    Queue(KwThis, tail):
      return ParseSuccess(KwThis, tail)
    Queue(KwNot, tail):
      if parseExpression(tail) is:
        ParseSuccess(negated, @tail):
          return ParseSuccess(Not(negated), tail)
        *:
          return Not(ParseFailure)
    *:
      return ParseFailure

main(args) ->:
  tokens = Tokens.readTokens(Stdio.stdin)
  ::: args is Array
  result = Empty
  if args.get(0) is:
    ~/expression$/:
      result = parseExpression(tokens)
  CharStreamOut.debugPretty(result)
  return 0
