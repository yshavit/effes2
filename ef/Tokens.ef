type Indent
type Dedent
type Nl

type KwBreak
type KwContinue
type KwElse
type KwFor
type KwImport
type KwIf
type KwIn
type KwIs
type KwNot
type KwReturn
type KwThis
type KwType
type KwWhile

type KwArrow
type KwAt
type KwAsterisk
type KwEq
type KwGe
type KwGt
type KwLe
type KwLt
type KwNe
type KwColon
type KwComma
type KwDash
type KwDot
type KwEquals
type KwNoop
type KwParenOpen
type KwParenClose
type KwPipe
type KwPlus
type KwQuestionMark
type KwSlash

type IdentType(value)
type IdentName(value)
type IntLiteral(value)
type StringLiteral(value)
type RegexLiteral(value)

type Unknown(value)

type Pair(first, second)

readTokens(input) ->:
  tokenizer = Tokenizer(Queue(0, Empty), Empty)
  tokenizer.readTokens(input)
  return tokenizer.tokens

type Tokenizer(indentations, tokens):
  readTokens(input) ->:
    ::: input is CharStreamIn
    while input.readLine() is:
      line ~/\s*/:
        _handleIndentations(line.group(0))
        _handlePayload(line.tail())
    _closeIndentations()
    tokens = Queue.reverse(tokens)
    return tokens

  _handleIndentations(prefix):
    ::: prefix is String
    indent = prefix.length()
    prevIndent = Queue.head(indentations)
    if indent == prevIndent:
      tokens = Queue.push(tokens, Nl)
    else if indent > prevIndent:
      tokens = Queue.push(tokens, Indent)
      indentations = Queue.push(indentations, indent)
    else:
      _unwindTo(indent)

  _unwindTo(targetIndent):
    # See https://github.com/yshavit/antlr-denter/blob/master/core/src/main/java/com/yuvalshavit/antlr4/DenterHelper.java#L144
    while indentations is Queue(prevIndent, @indentations):
      if targetIndent == prevIndent:
        break
      else if targetIndent > prevIndent:
        indentations = Queue.push(indentations, prevIndent)
        tokens = Queue.push(tokens, Indent)
        break
      else:
        tokens = Queue.push(tokens, Dedent)
    indentations = Queue.push(indentations, targetIndent)


  _handlePayload(payload):
    if payload is:
      m ~/\s+/:
        payload = m.tail()
    pair = if payload is:
      ~/(?:#.*)?$/: Empty
      m ~/"/: _handleQuotedString(m.tail())
      m ~/~\//: _handleRegex(m.tail())
      m ~/0|[1-9](0-9)*/: Pair(IntLiteral(m.group(0)), m.tail())
      tail: _lexWord(tail)
    if pair is:
      Empty:
        :::
      Pair(word, rest):
        tokens = Queue.push(tokens, word)
        _handlePayload(rest)
      *:
        unknown = Unknown(pair)
        tokens = Queue.push(tokens, unknown)

  _handleQuotedString(payload) -> :
    result = StringBuilder.create()
    ::: result is StringBuilder
    while payload is:
      m ~/[^\n\r"\\]+/:
        result.append(m.group(0))
        payload = m.tail()
      m ~/"/:
        r = result.get()
        return Pair(StringLiteral(r), m.tail())
      ~/$/:
        return result # unexpected EOL
      m ~/\\t/:
        result.append("\t")
        payload = m.tail()
      m ~/\\b/:
        result.append("\b")
        payload = m.tail()
      m ~/\\n/:
        result.append("\n")
        payload = m.tail()
      m ~/\\r/:
        result.append("\r")
        payload = m.tail()
      m ~/\\f/:
        result.append("\f")
        payload = m.tail()
      m ~/\\"/:
        result.append("\"")
        payload = m.tail()
      m ~/\\\\/:
        result.append("\\")
        payload = m.tail()

  _handleRegex(payload) -> :
    result = StringBuilder.create()
    ::: result is StringBuilder
    while payload is:
      m ~/[^\n\r\/\\]+/:
        result.append(m.group(0))
        payload = m.tail()
      m ~/\//:
        r = result.get()
        return Pair(RegexLiteral(r), m.tail())
      ~/$/:
        return result # unexpected EOL
      m ~/\\[tnrdDsSwWbBAGZz\\()\[\]\/.*+?|]/:
#m ~/\\[tnrdDsSwWbBAGZz\\()\[\]/:
        result.append(m.group(0))
        payload = m.tail()
    return payload

  _lexWord(word) -> :
    return if word is:
      # Keywords
      m ~/break\b/:     Pair(KwBreak, m.tail())
      m ~/continue\b/:  Pair(KwContinue, m.tail())
      m ~/else\b/:      Pair(KwElse, m.tail())
      m ~/for\b/:       Pair(KwFor, m.tail())
      m ~/import\b/:    Pair(KwImport, m.tail())
      m ~/if\b/:        Pair(KwIf, m.tail())
      m ~/in\b/:        Pair(KwIn, m.tail())
      m ~/is\b/:        Pair(KwIs, m.tail())
      m ~/not\b/:       Pair(KwNot, m.tail())
      m ~/return\b/:    Pair(KwReturn, m.tail())
      m ~/this\b/:      Pair(KwThis, m.tail())
      m ~/type\b/:      Pair(KwType, m.tail())
      m ~/while\b/:     Pair(KwWhile, m.tail())
      m ~/->/:        Pair(KwArrow, m.tail())
      m ~/@/:         Pair(KwAt, m.tail())
      m ~/\*/:        Pair(KwAsterisk, m.tail())
      m ~/==/:        Pair(KwEq, m.tail())
      m ~/>=/:        Pair(KwGe, m.tail())
      m ~/<=/:        Pair(KwLe, m.tail())
      m ~/</:         Pair(KwLt, m.tail())
      m ~/>/:         Pair(KwGt, m.tail())
      m ~/!=/:        Pair(KwNe, m.tail())
      m ~/:::/:       Pair(KwNoop, m.tail())
      m ~/:/:         Pair(KwColon, m.tail())
      m ~/,/:         Pair(KwComma, m.tail())
      m ~/-/:         Pair(KwDash, m.tail())
      m ~/\./:        Pair(KwDot, m.tail())
      m ~/=/:         Pair(KwEquals, m.tail())
      m ~/\(/:        Pair(KwParenOpen, m.tail())
      m ~/\)/:        Pair(KwParenClose, m.tail())
      m ~/\|/:        Pair(KwPipe, m.tail())
      m ~/\+/:        Pair(KwPlus, m.tail())
      m ~/\?/:        Pair(KwQuestionMark, m.tail())
      m ~/\//:        Pair(KwSlash, m.tail())
      m ~/_*[A-Z]\w*[a-z]\w*/:  Pair(IdentType(m.group(0)), m.tail())
      m ~/_*[a-z]\w*/:          Pair(IdentName(m.group(0)), m.tail())
      a:            a
    
  _closeIndentations():
    _handleIndentations("")

main(args) ->:
  tokens = readTokens(Stdio.stdin)
  while tokens is Queue(t, @tokens):
    CharStreamOut.debug(t)
  return 0
